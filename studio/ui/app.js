document.addEventListener("DOMContentLoaded", async () => {
    const NODE_ICONS = {
        USER: `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path fill="#ff4155" d="M470.135 386.1c19.654-35.26 30.867-75.869 30.867-119.102 0-135.311-109.691-245.002-245.002-245.002S10.998 131.687 10.998 266.998c0 43.233 11.213 83.842 30.867 119.102z" opacity="1" data-original="#ff4155" class=""></path><path fill="#ffaa7b" d="m330.102 315.01.007-.007c-.59-.166-1.191-.318-1.788-.476-.198-.052-.394-.109-.592-.161l-.004.003a208.66 208.66 0 0 0-6.084-1.513c-10.152-10.152-12.726-29.399-13.189-42.865-5.298 6.171-10.858 11.333-16.171 15.458-10.352 8.039-23.125 12.405-36.281 12.405s-25.93-4.366-36.281-12.405c-5.313-4.125-10.874-9.288-16.172-15.458-.464 13.466-3.037 32.713-13.19 42.865-2.076.479-4.128.999-6.169 1.535l-.004-.003c-.189.049-.376.103-.565.153-.604.16-1.212.314-1.814.479l.011.01a221.43 221.43 0 0 0-27.206 9.394v23.865c16.447 22.481 38.453 36.497 51.049 41.791 5.661 2.379 11.695 3.585 17.936 3.585h17.684l4.325 1.5h20.79l4.325-1.5h17.684c6.24 0 12.274-1.207 17.935-3.585 12.525-5.265 34.355-19.151 50.772-41.411V324.31a222.096 222.096 0 0 0-27.008-9.3z" opacity="1" data-original="#ffaa7b" class=""></path><path fill="#fc9460" d="M219.719 285.451c-5.313-4.126-10.874-9.288-16.172-15.459-.464 13.466-3.037 32.713-13.189 42.865-2.077.479-4.128.999-6.169 1.536l-.004-.003c-.189.05-.376.103-.565.154-.604.16-1.212.314-1.814.479a.3.3 0 0 0 .012.01c-3.651 1-7.239 2.113-10.798 3.287 9.912 23.667 30.718 64.424 52.73 53.135 30.549-15.667 32.25-73.6 32.25-73.6-13.156 0-25.93-4.366-36.281-12.404z" opacity="1" data-original="#fc9460"></path><path fill="#ffc839" d="M343.885 363.085c-13.616 12.583-28.181 20.062-37.546 23.998-5.661 2.379-11.695 3.585-17.935 3.585H270.72l-4.325 1.5h-20.79l-4.325-1.5h-17.684c-6.24 0-12.274-1.207-17.936-3.585a130.898 130.898 0 0 1-6.71-3.056v74.424s-19.073 18.838-5.026 45.6C213.751 509.229 234.55 512 256 512c59.505 0 114.05-21.22 156.496-56.498v-3.622c0-37.255-44.651-72.541-68.611-88.795z" opacity="1" data-original="#ffc839" class=""></path><path fill="#ffb332" d="M200.95 458.451v-73.466c-9.133-4.277-21.278-11.238-32.767-21.838-23.911 16.212-68.583 51.48-68.583 88.719v3.718c27.721 23.016 60.599 40.034 96.643 49.07-14.655-27.081 4.707-46.203 4.707-46.203z" opacity="1" data-original="#ffb332"></path><path fill="#ffdd40" d="M470.135 386.1c-.214-.413-.423-.832-.639-1.24-8.001-15.05-21.438-26.485-37.47-32.275l-67.829-24.496c1.249 2.519 2.099 6.246-.318 10.351-6.323 10.743-14.078 19.469-22.049 26.497 22.402 14.931 67.781 49.715 67.781 86.497v6.417c24.495-19.74 45.109-44.095 60.524-71.751z" opacity="1" data-original="#ffdd40"></path><path fill="#ffc839" d="M148.12 338.441c-2.417-4.105-1.566-7.832-.318-10.351l-67.829 24.496c-16.031 5.79-29.468 17.225-37.469 32.275-.217.408-.426.827-.639 1.24 15.415 27.655 36.028 52.011 60.524 71.751v-6.417c0-36.782 45.378-71.565 67.78-86.497-7.971-7.028-15.725-15.754-22.049-26.497z" opacity="1" data-original="#ffc839" class=""></path><path fill="#fee77f" d="M371.142 293.231c-7.411-17.292-31.448-27.399-63.093-37.994l-2.171 17.329s19.971 78.808-39.483 119.602h28.918c8.1 0 16.111-1.703 23.49-5.046 9.276-4.204 22.284-11.037 33.878-20.512 21.67-17.71 29.486-47.655 18.461-73.379zM208.384 341.28c-11.013-2.834-39.25-6.531-46.772 27.154 10.988 8.532 22.916 14.759 31.585 18.688 7.378 3.344 15.389 5.046 23.489 5.046h28.918c-20.47-14.046-31.523-32.598-37.22-50.888z" opacity="1" data-original="#fee77f" class=""></path><path fill="#ffdd40" d="m206.122 272.566-2.171-17.329c-31.645 10.595-55.682 20.701-63.093 37.994-11.025 25.724-3.209 55.669 18.462 73.378a118.987 118.987 0 0 0 3.941 3.077c7.511-40.209 46.221-25.082 46.221-25.082l.001-.007c-12.494-35.964-3.361-72.031-3.361-72.031z" opacity="1" data-original="#ffdd40"></path><path fill="#deeeff" d="M200.95 458.451c-4.693 0-8.532-3.839-8.532-8.532v-70.083c0-4.693 3.839-8.532 8.532-8.532s8.532 3.839 8.532 8.532v70.083c0 4.693-3.839 8.532-8.532 8.532zM310.772 458.451c-4.693 0-8.532-3.839-8.532-8.532v-70.083c0-4.693 3.839-8.532 8.532-8.532s8.532 3.839 8.532 8.532v70.083c0 4.693-3.839 8.532-8.532 8.532z" opacity="1" data-original="#deeeff"></path><path fill="#ff7186" d="M411.6 77.746c-17.771 12.145-31.22 30.742-26.537 58.7 12.27 73.253-44.248 110.625 44.083 149.899 31.405 13.964 51.185 30.3 63.502 44.267 5.444-20.286 8.354-41.61 8.354-63.615 0-76.224-34.812-144.316-89.402-189.251zM100.4 77.746c17.771 12.145 31.22 30.742 26.537 58.7-12.27 73.253 44.248 110.625-44.083 149.899-31.405 13.964-51.185 30.3-63.502 44.267-5.444-20.286-8.354-41.61-8.354-63.615 0-76.224 34.812-144.316 89.402-189.251z" opacity="1" data-original="#ff7186" class=""></path><path fill="#945230" d="M351.433 158.082c6.504-26.523 11.816-66.265-2.247-99.333C321.993-5.195 247.986-1.253 228.374.999c-2.059.236-3.092 2.585-1.921 4.294 11.756 17.162-34.301 1.613-59.334 54.123-15.866 33.279-11.879 72.461-6.079 98.667h190.393z" opacity="1" data-original="#945230" class=""></path><path fill="#753616" d="M254.926 70.454S247.554 53.5 266.223 39.5C284.867 25.518 257.074.397 257.002.332c-12.505-.792-22.894.008-28.628.667-2.059.237-3.092 2.585-1.921 4.294 11.756 17.162-34.301 1.613-59.334 54.123-15.866 33.28-11.879 72.462-6.079 98.667h43.521l13.824-5.492z" opacity="1" data-original="#753616"></path><path fill="#ffaa7b" d="M355.256 154.721c-4.103-3.76-13.276-1.854-16.81.448a49.69 49.69 0 0 1 .15 14.623l-4.17 30.372c0 2.448-.077 4.85-.219 7.21 10.169 3.067 16.22-6.062 17.071-12.327a46.57 46.57 0 0 1 1.796-7.949c2.704-8.446 12.462-22.956 2.182-32.377z" opacity="1" data-original="#ffaa7b" class=""></path><path fill="#fc9460" d="M156.744 154.721c4.103-3.76 13.276-1.854 16.81.448a49.656 49.656 0 0 0-.149 14.623l4.17 30.372c0 2.448.077 4.85.219 7.21-10.169 3.067-16.22-6.062-17.071-12.327a46.57 46.57 0 0 0-1.796-7.949c-2.705-8.446-12.463-22.956-2.183-32.377z" opacity="1" data-original="#fc9460"></path><path fill="#ffc7ab" d="M333.324 138.518c-4.621-7.249-3.09-13.17-3.015-20.103 0 0 3.898-31.917-35.411-43.25-11.38-3.281-27.439-5.243-43.894-4.612-11.451 8.073-18.992 19.919-18.992 36.705 0 7.715 1.663 13.744-3.072 21.566-5.105 8.435-8.076 20.602-6.389 33.542l4.249 32.589c0 46.852 23.748 78.697 43.949 95.217a59.417 59.417 0 0 0 9.14 6.131 58.864 58.864 0 0 0 12.391-7.38c19.831-15.4 43.144-45.085 43.144-88.758l4.17-30.372c1.645-11.967-1.207-23.331-6.27-31.275z" opacity="1" data-original="#ffc7ab" class=""></path><path fill="#ffaa7b" d="M270.955 288.264c-19.831-16.218-43.145-47.48-43.145-93.475l-4.171-31.993c-1.656-12.702 1.26-24.647 6.272-32.928 4.647-7.679 3.015-13.597 3.015-21.172 0-18.073 8.888-30.329 21.999-38.243-34.936.483-73.235 12.325-73.235 47.962 0 7.192 1.633 12.812-3.015 20.104-5.012 7.863-7.928 19.205-6.272 31.267l4.171 30.379c0 43.674 23.313 73.359 43.145 88.758 10.351 8.038 23.125 12.404 36.281 12.404 9.051 0 17.92-2.066 25.944-5.973a58.326 58.326 0 0 1-10.989-7.09z" opacity="1" data-original="#ffaa7b" class=""></path><path fill="#945230" d="M312.145 235.343c-2.319-13.828-12.296-27.674-25.616-30.695l-20.359-5.981c-3.539-1.039-7.082.776-8.507 3.858a.718.718 0 0 1-1.308 0c-1.426-3.082-4.969-4.897-8.508-3.858l-20.359 5.981c-.505.115-1.003.249-1.498.394h.19c-2.157 5.074-5.885 17.675 4.727 27.302a45.781 45.781 0 0 1 10.941-3.938l3.636-.803c5.3-1.17 9.399-6.344 10.902-11.857.172-.633 1.072-.633 1.245 0 1.503 5.513 5.601 10.687 10.902 11.857l3.637.803a45.91 45.91 0 0 1 26.088 16.331c-1.341 5.962-5.546 15.022-18.578 19.627-8.744 3.089-18.286-2.41-19.406-11.512l-.041-.356a3.354 3.354 0 0 0-6.67 0l-.041.356c-.602 4.893-3.648 8.727-7.685 10.764-1.122 4.448-2.611 14.038 2.032 23.35 3.358 6.735 9.253 11.947 17.556 15.56a47.776 47.776 0 0 0 12.236-4.239c20.375-10.373 47.464-28.395 56.129-74.759a63.035 63.035 0 0 0 1.074-11.567c-3.299 8.14-10.155 17.932-22.719 23.382z" opacity="1" data-original="#945230" class=""></path><path fill="#753616" d="M234.194 298.276c10.52 5.361 22.545 6.573 33.757 3.67-27.398-10.62-21.735-34.541-20.244-39.447a14.91 14.91 0 0 1-13.591 1.866c-12.031-4.251-17.206-12.302-19.431-18.205a45.984 45.984 0 0 1 17.676-14.528c-11.553-9.99-6.07-23.528-4.288-27.155l-.585.172c-13.583 3.08-23.696 17.417-25.751 31.513-13.897-5.24-21.131-15.636-24.6-24.2v.004c0 3.873.361 7.744 1.072 11.551 8.649 46.355 35.608 64.375 55.985 74.759z" opacity="1" data-original="#753616"></path></g></svg>`,
        SUPERVISOR: `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><g fill-rule="evenodd" clip-rule="evenodd"><path fill="#6abdc8" d="M166.2 246.2c-44.3 0-80.3-35.9-80.3-80.3 0-44.3 35.9-80.3 80.3-80.3s80.3 35.9 80.3 80.3c0 44.3-35.9 80.3-80.3 80.3z" opacity="1" data-original="#6abdc8"></path><path fill="#fcb13b" d="M332.9 267.8h26.3v17.1c9.6 1.8 18.5 5.6 26.3 10.9l12.1-12.1 18.6 18.6-12.1 12.1c5.3 7.8 9.1 16.7 10.9 26.3h17.2V367H415c-1.8 9.6-5.6 18.5-10.9 26.3l12.1 12.1-18.6 18.6-12-12c-7.8 5.3-16.7 9.1-26.3 10.9V440H333v-17.1c-9.6-1.8-18.5-5.6-26.3-10.9l-12.1 12.1-18.6-18.6 12.1-12.1c-5.3-7.8-9.1-16.7-10.9-26.3H260v-26.3h17.1c1.8-9.6 5.6-18.5 10.9-26.3l-12.1-12.1 18.6-18.6 12.1 12.1c7.8-5.3 16.7-9.1 26.3-10.9z" opacity="1" data-original="#fcb13b" class=""></path><path fill="#cc4342" d="M346.1 313.4c22.4 0 40.5 18.1 40.5 40.5s-18.1 40.5-40.5 40.5-40.5-18.1-40.5-40.5c0-22.3 18.1-40.5 40.5-40.5z" opacity="1" data-original="#cc4342" class=""></path></g><path d="M192.8 145.9c-2.4-2.2-2.6-6-.4-8.4s6-2.6 8.4-.4l26.6 24.4c2.6 2.4 2.6 6.5 0 8.8l-26.6 24.4c-2.4 2.2-6.2 2-8.4-.4s-2.1-6.2.4-8.4l21.9-20zm-34.6 50.4c-1.4 3-5 4.2-8 2.8s-4.2-5-2.8-8l26.9-55.7c1.4-3 5-4.2 8-2.8s4.2 5 2.8 8zm-26.5-59.2c2.4-2.2 6.2-2.1 8.4.4 2.2 2.4 2.1 6.2-.4 8.4l-21.9 20 21.9 20c2.4 2.2 2.6 6 .4 8.4s-6 2.6-8.4.4L105 170.3c-2.6-2.4-2.6-6.4 0-8.8zm214.4 170.3c25.7 0 46.5 20.8 46.5 46.5s-20.8 46.5-46.5 46.5-46.5-20.8-46.5-46.5 20.8-46.5 46.5-46.5zm24.4 22.1c-13.5-13.5-35.3-13.5-48.8 0s-13.5 35.3 0 48.8 35.3 13.5 48.8 0c13.5-13.4 13.5-35.3 0-48.8zm-37.6-67.7h26.3c3.3 0 6 2.7 6 6v12.4c6.8 1.8 13.4 4.5 19.4 8.1l8.7-8.7c2.4-2.4 6.2-2.4 8.5 0l18.6 18.6c2.3 2.3 2.3 6.1 0 8.5l-8.8 8.7c3.5 6.1 6.3 12.6 8.1 19.4h12.4c3.3 0 6 2.7 6 6v26.3c0 3.5-2.8 6.2-6.5 6h-11.8c-1.8 6.8-4.5 13.4-8.1 19.5l8.8 8.7c2.3 2.4 2.3 6.2 0 8.5l-18.6 18.6c-2.4 2.3-6.2 2.3-8.5 0l-8.7-8.8c-6.1 3.6-12.6 6.3-19.4 8.1v12.4c0 3.3-2.7 6-6 6H333c-3.3 0-6-2.7-6-6v-12.4c-6.8-1.8-13.4-4.5-19.4-8.1l-8.7 8.8c-2.4 2.3-6.2 2.3-8.5 0l-18.6-18.6c-2.4-2.4-2.4-6.2 0-8.5l8.7-8.7c-3.5-6.1-6.3-12.6-8.1-19.4H260c-3.3 0-6-2.7-6-6v-26.3c0-3.3 2.7-6 6-6h12.4c1.8-6.8 4.5-13.4 8.1-19.4l-8.7-8.7c-2.4-2.4-2.4-6.2 0-8.5l18.6-18.6c2.3-2.4 6.1-2.4 8.5 0l8.7 8.7c6.1-3.5 12.6-6.3 19.5-8.1v-12.4c-.2-3.4 2.5-6.1 5.8-6.1zm20.3 12h-14.3v10.8c.2 3-1.9 5.7-4.9 6.2-7.8 1.5-17.4 5.2-23.7 9.8-2.4 1.8-5.8 1.6-7.9-.5l-7.9-7.9-10.1 10.1 7.9 7.9c2 2 2.4 5.2.7 7.6-2.5 3.6-4.6 7.5-6.2 11.5-1.6 3.9-2.8 7.9-3.7 12.1-.4 3-2.9 5.3-6 5.3h-11.2V361h11.2c2.8 0 5.3 2 5.9 4.9 1.5 7.8 5.2 17.4 9.8 23.8 1.8 2.4 1.7 5.8-.5 7.9l-7.9 7.9 10.1 10.1 7.9-7.9c2-2 5.2-2.4 7.6-.7 3.6 2.4 7.5 4.5 11.5 6.2 3.9 1.6 7.9 2.8 12.1 3.7 3 .4 5.3 2.9 5.3 6V434h14.3v-11.1c0-2.8 2-5.4 4.9-5.9 7.8-1.5 17.4-5.2 23.7-9.8 2.4-1.8 5.8-1.7 7.9.5l7.9 7.9 10.1-10.1-7.9-7.9c-2-2-2.4-5.2-.7-7.6 4.9-7.2 8.3-15.4 9.9-24 .5-2.7 2.9-4.9 5.9-4.9H426v-14.3h-11.1c-2.8 0-5.4-2-5.9-4.9-1.5-7.8-5.2-17.4-9.8-23.7-1.8-2.4-1.7-5.8.5-7.9l7.9-7.9-10.1-10.1-7.9 7.9c-2 2-5.2 2.4-7.6.7-3.6-2.5-7.5-4.6-11.5-6.2-3.9-1.6-7.9-2.8-12.1-3.7-3-.3-5.3-2.9-5.3-6v-11.2zm-17.9 197.9c3.3.3 5.8 3.1 5.5 6.4s-3.1 5.8-6.4 5.5c-82.3-6.5-139.5-85.5-119.4-166.2-4.8-.9-6.6-6.8-3.1-10.2l9.9-9.4c3.4-3.2 9-1.5 10 3.1l2.9 14c1 4.8-4 8.7-8.4 6.6-17.4 73.2 34.5 144.3 109 150.2zM80 267.5c-2.5-2.1-2.8-5.9-.7-8.4s5.9-2.8 8.4-.7c34.2 29.2 82 37.2 124 20.7 14.1-5.6 27.9-14.2 38.7-24.3 26.1-25.9 60.3-38.8 94.6-38.7 33.4.1 66.8 12.5 92.7 37.3 3.1-3.6 9-2.3 10.3 2.4l3.7 13.6c1.2 4.5-3.1 8.8-7.8 7.2l-13.5-4.4c-4.8-1.5-5.6-7.9-1.5-10.6-23.5-22.3-53.7-33.4-83.8-33.5-31.2-.1-62.4 11.7-86.2 35.3l-.3.3c-49.8 46.2-126.7 48-178.6 3.8zm80.9-241.7c4.2-2.4 9.3.9 9 5.6C252 33.1 313.2 107.8 299 188.7c-.6 3.3-3.7 5.4-6.9 4.9-3.3-.6-5.4-3.7-4.9-6.9C300 113.3 244.8 45.4 170.3 43.4c.9 4.8-4.2 8.7-8.6 6.4l-12.8-6.5c-4.2-2.1-4.4-8.1-.3-10.5zM48.4 240.2c-4.4-2.5-3.8-8.9.8-10.7-24.1-44.4-21.2-98.5 7.3-140 15.3-22.2 37.1-39.6 62.7-49.4 3.1-1.2 6.5.4 7.7 3.5s-.4 6.5-3.5 7.7C63 74.4 30.8 141 50.8 203c2.3 7.2 5.3 14.1 8.8 20.7 3.7-3.2 9.6-.8 9.9 4.2l.8 14.3c.2 4.7-4.8 7.9-9 5.5zm334.7 238.4c2 4.6-2.2 9.5-7.1 8.2l-14.5-3.9c-4.4-1.2-6.3-7.1-2.1-10.5l10.4-9.3c3.7-3.3 9.6-.9 9.9 4 43.9-13 77-49.9 85.3-94.8 4.5-24.2 1.6-49.4-8.6-72.2-1.3-3 0-6.5 3-7.9s6.5 0 7.9 3c29.1 64.9 2.4 141.6-61.2 174.2-7.4 3.8-15.1 6.9-23 9.2zM166.2 252.2c-47.7 0-86.3-38.6-86.3-86.3s38.6-86.3 86.3-86.3 86.3 38.6 86.3 86.3c.1 47.7-38.6 86.3-86.3 86.3zm-52.5-33.8c29 29 76.1 29 105.1 0s29-76.1 0-105.1-76.1-29-105.1 0c-29 29.1-29 76.1 0 105.1z" fill="#000000" opacity="1" data-original="#000000" class=""></path></g></svg>`,
        AGENT: `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 42 42" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><linearGradient id="a" x1="21" x2="21" y1="2.76" y2="39.24" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#f12711"></stop><stop offset="1" stop-color="#f5ae19"></stop></linearGradient><path fill="url(#a)" fill-rule="evenodd" d="M18.75 6.51a2.25 2.25 0 1 1 4.5 0 2.25 2.25 0 0 1-4.5 0zM21 2.76a3.75 3.75 0 0 0-.75 7.425v3.555H8a2.75 2.75 0 0 0-2.75 2.75v3.312a1.751 1.751 0 0 0-.461-.062h-3a1.75 1.75 0 0 0-1.75 1.75v10c0 .967.783 1.75 1.75 1.75h3c.16 0 .314-.021.461-.061v3.311A2.75 2.75 0 0 0 8 39.24h26a2.75 2.75 0 0 0 2.75-2.75V33.18c.147.04.302.061.462.061h3a1.75 1.75 0 0 0 1.75-1.75v-10a1.75 1.75 0 0 0-1.75-1.75h-3c-.16 0-.315.021-.462.062V16.49A2.75 2.75 0 0 0 34 13.74H21.75v-3.555A3.751 3.751 0 0 0 21 2.76zM1.789 21.24a.25.25 0 0 0-.25.25v10c0 .138.112.25.25.25h3a.25.25 0 0 0 .25-.25v-10a.25.25 0 0 0-.25-.25zm35.422 0a.25.25 0 0 0-.25.25v10c0 .138.112.25.25.25h3a.25.25 0 0 0 .25-.25v-10a.25.25 0 0 0-.25-.25zM8 15.24c-.69 0-1.25.56-1.25 1.25v20c0 .69.56 1.25 1.25 1.25h26c.69 0 1.25-.56 1.25-1.25v-20c0-.69-.56-1.25-1.25-1.25zm7 11.25a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm1.5 0a3 3 0 1 1-6 0 3 3 0 0 1 6 0zm12 1.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm0 1.5a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" clip-rule="evenodd" opacity="1" data-original="url(#a)" class=""></path></g></svg>`,
        TOOL: `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 511 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path fill="#2bbdc4" d="M487.844 416.629c19.52 19.531 19.52 51.187 0 70.719-19.516 19.52-51.196 19.52-70.715 0L283.402 342.09l58.95-58.938zm0 0" opacity="1" data-original="#2bbdc4"></path><path fill="#495d85" d="m312.91 256.133 29.442 27.02-58.95 58.937-27.058-29.387zm0 0" opacity="1" data-original="#495d85"></path><path fill="#e9eef0" d="m497.797 71.258-44.39 44.738h-28.29l-27.629-28.629V59.078l43.739-44.387A89.862 89.862 0 0 0 412.488 10c-61.617 0-104.898 60.598-85.308 118.746l-84.97 84.98-.065-.07L109.496 80.707V52.43L38.79 10 10.508 38.281l42.422 70.707 28.277.012 132.656 132.945.059.059-84.676 84.68C71.207 307.133 10.5 350.25 10.5 411.988c0 10.051 1.648 19.719 4.687 28.739l44.391-44.739h28.29l28.628 28.63v28.288l-44.738 44.39a89.862 89.862 0 0 0 28.738 4.692c61.73 0 104.86-60.71 85.309-118.75l197.933-197.933a89.88 89.88 0 0 0 28.75 4.691c49.707 0 89.996-40.289 89.996-89.996 0-10.05-1.648-19.723-4.687-28.742zm0 0" opacity="1" data-original="#e9eef0" class=""></path><path d="M347.34 155.148c-5.52 0-10 4.47-10 9.997 0 5.523 4.48 10 10 10 5.531 0 10-4.477 10-10a9.988 9.988 0 0 0-10-9.997zM165.645 336.84c-5.532 0-10 4.48-10 10a9.99 9.99 0 0 0 10 10c5.52 0 10-4.469 10-10 0-5.52-4.48-10-10-10zm0 0" fill="#000000" opacity="1" data-original="#000000" class=""></path><path d="M500.059 61.52a9.992 9.992 0 0 0-9.36 2.695L449.242 106h-19.875l-21.879-22.668V63.18l40.864-41.473a9.993 9.993 0 0 0 2.601-9.336 9.994 9.994 0 0 0-6.531-7.156C434.156 1.754 423.414 0 412.488 0c-32.57 0-62.16 15.188-81.183 41.668-17.805 24.789-23.293 55.168-15.43 84.242l-73.66 73.66-122.719-123V52.43a9.998 9.998 0 0 0-4.855-8.575L43.934 1.425A9.992 9.992 0 0 0 31.719 2.93L3.438 31.207a10.01 10.01 0 0 0-1.504 12.219l42.421 70.707a10 10 0 0 0 8.57 4.855l24.134.008 122.73 123-73.379 73.379c-29.074-7.86-59.469-2.363-84.27 15.453C15.677 349.84.5 379.422.5 411.992c0 10.922 1.754 21.668 5.215 31.93a10 10 0 0 0 16.574 3.852l41.453-41.782h19.985l22.77 22.77v19.984L64.714 490.2a10 10 0 0 0 3.851 16.574c10.262 3.461 21.008 5.215 31.93 5.215 32.57 0 62.149-15.18 81.164-41.644 17.817-24.801 23.313-55.192 15.453-84.266l58.934-58.933 13.5 14.664-6.195 6.191c-3.907 3.906-3.907 10.238 0 14.145 3.906 3.902 10.234 3.902 14.144 0l5.61-5.61L409.77 494.121c.093.102.19.2.289.297 23.437 23.437 61.41 23.445 84.859-.004 23.383-23.394 23.383-61.46 0-84.855-.102-.102-.207-.2-.313-.297l-137.8-126.422 5.547-5.547c3.906-3.902 3.906-10.234 0-14.14s-10.235-3.907-14.145 0l-6.152 6.156-14.692-13.485 59.219-59.219a100.198 100.198 0 0 0 25.906 3.391c55.14 0 99.996-44.86 99.996-99.996 0-10.926-1.754-21.668-5.214-31.934a9.99 9.99 0 0 0-7.211-6.546zM88.285 101.934c-1.875-1.88-4.418-2.836-7.074-2.836l-22.617-.008-35.492-59.258L40.34 22.594l59.156 35.5V80.71a9.997 9.997 0 0 0 2.922 7.062l125.656 125.942-14.144 14.14zm254.363 195.062 138.27 126.848c15.445 15.61 15.398 40.883-.145 56.433-15.578 15.578-40.796 15.625-56.437.137L297.258 342.38zm-14.75-13.535L283.7 327.652l-13.5-14.664 43.008-43.011zm84.59-103.465a79.917 79.917 0 0 1-25.558-4.168 10.017 10.017 0 0 0-10.262 2.406c-50.133 50.133-158.156 158.153-197.934 197.934a9.998 9.998 0 0 0-2.406 10.266c8.313 24.683 4.336 51.011-10.914 72.242-15.207 21.168-38.871 33.312-64.918 33.312-2.926 0-5.836-.16-8.719-.468l31.762-31.516a9.997 9.997 0 0 0 2.957-7.098v-28.289a10 10 0 0 0-2.93-7.07l-28.628-28.629a10 10 0 0 0-7.07-2.93h-28.29a10.012 10.012 0 0 0-7.101 2.957l-31.512 31.762a80.897 80.897 0 0 1-.469-8.719c0-26.05 12.14-49.71 33.313-64.918 21.226-15.25 47.558-19.23 72.246-10.914a9.993 9.993 0 0 0 10.261-2.406c.551-.547 197.793-197.793 197.934-197.934a9.999 9.999 0 0 0 2.406-10.261c-8.316-24.684-4.347-51.004 10.89-72.22C362.767 32.149 386.435 20 412.485 20c3.016 0 6.012.168 8.98.496l-31.1 31.566a9.993 9.993 0 0 0-2.876 7.016v28.29a9.988 9.988 0 0 0 2.805 6.944l27.629 28.63a9.992 9.992 0 0 0 7.195 3.054h28.29a9.994 9.994 0 0 0 7.097-2.957l31.512-31.758c.312 2.883.468 5.793.468 8.719 0 44.11-35.886 79.996-79.996 79.996zm0 0" fill="#000000" opacity="1" data-original="#000000" class=""></path><path d="M311.988 186.355 186.852 311.492c-3.903 3.903-3.903 10.235 0 14.14 3.906 3.907 10.238 3.907 14.144 0l125.137-125.136c3.906-3.902 3.906-10.234 0-14.14s-10.238-3.907-14.145 0zM438.355 452c3.907 3.895 10.239 3.895 14.145-.023 3.898-3.91 3.887-10.243-.023-14.141l-90.137-89.848c-3.91-3.898-10.246-3.886-14.14.024-3.903 3.914-3.891 10.242.019 14.14zm0 0" fill="#000000" opacity="1" data-original="#000000" class=""></path></g></svg>`,
        MCP: `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 64 64" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path fill="#000000" fill-rule="evenodd" d="M2 20c0-9.941 8.059-18 18-18h24c9.941 0 18 8.059 18 18v24c0 9.941-8.059 18-18 18H20c-9.941 0-18-8.059-18-18zm43-4H23.99l15.241 14.554a2 2 0 0 1 0 2.893L23.991 48H45a2 2 0 1 1 0 4H19a2 2 0 0 1-1.381-3.446L34.954 32 17.619 15.447A2 2 0 0 1 19 12h26a2 2 0 1 1 0 4z" clip-rule="evenodd" opacity="1" data-original="#000000" class=""></path></g></svg>`
    };
    
    const ICONS = {
        USER: `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path fill="#ff4155" d="M470.135 386.1c19.654-35.26 30.867-75.869 30.867-119.102 0-135.311-109.691-245.002-245.002-245.002S10.998 131.687 10.998 266.998c0 43.233 11.213 83.842 30.867 119.102z" opacity="1" data-original="#ff4155" class=""></path><path fill="#ffaa7b" d="m330.102 315.01.007-.007c-.59-.166-1.191-.318-1.788-.476-.198-.052-.394-.109-.592-.161l-.004.003a208.66 208.66 0 0 0-6.084-1.513c-10.152-10.152-12.726-29.399-13.189-42.865-5.298 6.171-10.858 11.333-16.171 15.458-10.352 8.039-23.125 12.405-36.281 12.405s-25.93-4.366-36.281-12.405c-5.313-4.125-10.874-9.288-16.172-15.458-.464 13.466-3.037 32.713-13.19 42.865-2.076.479-4.128.999-6.169 1.535l-.004-.003c-.189.049-.376.103-.565.153-.604.16-1.212.314-1.814.479l.011.01a221.43 221.43 0 0 0-27.206 9.394v23.865c16.447 22.481 38.453 36.497 51.049 41.791 5.661 2.379 11.695 3.585 17.936 3.585h17.684l4.325 1.5h20.79l4.325-1.5h17.684c6.24 0 12.274-1.207 17.935-3.585 12.525-5.265 34.355-19.151 50.772-41.411V324.31a222.096 222.096 0 0 0-27.008-9.3z" opacity="1" data-original="#ffaa7b" class=""></path><path fill="#fc9460" d="M219.719 285.451c-5.313-4.126-10.874-9.288-16.172-15.459-.464 13.466-3.037 32.713-13.189 42.865-2.077.479-4.128.999-6.169 1.536l-.004-.003c-.189.05-.376.103-.565.154-.604.16-1.212.314-1.814.479a.3.3 0 0 0 .012.01c-3.651 1-7.239 2.113-10.798 3.287 9.912 23.667 30.718 64.424 52.73 53.135 30.549-15.667 32.25-73.6 32.25-73.6-13.156 0-25.93-4.366-36.281-12.404z" opacity="1" data-original="#fc9460"></path><path fill="#ffc839" d="M343.885 363.085c-13.616 12.583-28.181 20.062-37.546 23.998-5.661 2.379-11.695 3.585-17.935 3.585H270.72l-4.325 1.5h-20.79l-4.325-1.5h-17.684c-6.24 0-12.274-1.207-17.936-3.585a130.898 130.898 0 0 1-6.71-3.056v74.424s-19.073 18.838-5.026 45.6C213.751 509.229 234.55 512 256 512c59.505 0 114.05-21.22 156.496-56.498v-3.622c0-37.255-44.651-72.541-68.611-88.795z" opacity="1" data-original="#ffc839" class=""></path><path fill="#ffb332" d="M200.95 458.451v-73.466c-9.133-4.277-21.278-11.238-32.767-21.838-23.911 16.212-68.583 51.48-68.583 88.719v3.718c27.721 23.016 60.599 40.034 96.643 49.07-14.655-27.081 4.707-46.203 4.707-46.203z" opacity="1" data-original="#ffb332"></path><path fill="#ffdd40" d="M470.135 386.1c-.214-.413-.423-.832-.639-1.24-8.001-15.05-21.438-26.485-37.47-32.275l-67.829-24.496c1.249 2.519 2.099 6.246-.318 10.351-6.323 10.743-14.078 19.469-22.049 26.497 22.402 14.931 67.781 49.715 67.781 86.497v6.417c24.495-19.74 45.109-44.095 60.524-71.751z" opacity="1" data-original="#ffdd40"></path><path fill="#ffc839" d="M148.12 338.441c-2.417-4.105-1.566-7.832-.318-10.351l-67.829 24.496c-16.031 5.79-29.468 17.225-37.469 32.275-.217.408-.426.827-.639 1.24 15.415 27.655 36.028 52.011 60.524 71.751v-6.417c0-36.782 45.378-71.565 67.78-86.497-7.971-7.028-15.725-15.754-22.049-26.497z" opacity="1" data-original="#ffc839" class=""></path><path fill="#fee77f" d="M371.142 293.231c-7.411-17.292-31.448-27.399-63.093-37.994l-2.171 17.329s19.971 78.808-39.483 119.602h28.918c8.1 0 16.111-1.703 23.49-5.046 9.276-4.204 22.284-11.037 33.878-20.512 21.67-17.71 29.486-47.655 18.461-73.379zM208.384 341.28c-11.013-2.834-39.25-6.531-46.772 27.154 10.988 8.532 22.916 14.759 31.585 18.688 7.378 3.344 15.389 5.046 23.489 5.046h28.918c-20.47-14.046-31.523-32.598-37.22-50.888z" opacity="1" data-original="#fee77f" class=""></path><path fill="#ffdd40" d="m206.122 272.566-2.171-17.329c-31.645 10.595-55.682 20.701-63.093 37.994-11.025 25.724-3.209 55.669 18.462 73.378a118.987 118.987 0 0 0 3.941 3.077c7.511-40.209 46.221-25.082 46.221-25.082l.001-.007c-12.494-35.964-3.361-72.031-3.361-72.031z" opacity="1" data-original="#ffdd40"></path><path fill="#deeeff" d="M200.95 458.451c-4.693 0-8.532-3.839-8.532-8.532v-70.083c0-4.693 3.839-8.532 8.532-8.532s8.532 3.839 8.532 8.532v70.083c0 4.693-3.839 8.532-8.532 8.532zM310.772 458.451c-4.693 0-8.532-3.839-8.532-8.532v-70.083c0-4.693 3.839-8.532 8.532-8.532s8.532 3.839 8.532 8.532v70.083c0 4.693-3.839 8.532-8.532 8.532z" opacity="1" data-original="#deeeff"></path><path fill="#ff7186" d="M411.6 77.746c-17.771 12.145-31.22 30.742-26.537 58.7 12.27 73.253-44.248 110.625 44.083 149.899 31.405 13.964 51.185 30.3 63.502 44.267 5.444-20.286 8.354-41.61 8.354-63.615 0-76.224-34.812-144.316-89.402-189.251zM100.4 77.746c17.771 12.145 31.22 30.742 26.537 58.7-12.27 73.253 44.248 110.625-44.083 149.899-31.405 13.964-51.185 30.3-63.502 44.267-5.444-20.286-8.354-41.61-8.354-63.615 0-76.224 34.812-144.316 89.402-189.251z" opacity="1" data-original="#ff7186" class=""></path><path fill="#945230" d="M351.433 158.082c6.504-26.523 11.816-66.265-2.247-99.333C321.993-5.195 247.986-1.253 228.374.999c-2.059.236-3.092 2.585-1.921 4.294 11.756 17.162-34.301 1.613-59.334 54.123-15.866 33.279-11.879 72.461-6.079 98.667h190.393z" opacity="1" data-original="#945230" class=""></path><path fill="#753616" d="M254.926 70.454S247.554 53.5 266.223 39.5C284.867 25.518 257.074.397 257.002.332c-12.505-.792-22.894.008-28.628.667-2.059.237-3.092 2.585-1.921 4.294 11.756 17.162-34.301 1.613-59.334 54.123-15.866 33.28-11.879 72.462-6.079 98.667h43.521l13.824-5.492z" opacity="1" data-original="#753616"></path><path fill="#ffaa7b" d="M355.256 154.721c-4.103-3.76-13.276-1.854-16.81.448a49.69 49.69 0 0 1 .15 14.623l-4.17 30.372c0 2.448-.077 4.85-.219 7.21 10.169 3.067 16.22-6.062 17.071-12.327a46.57 46.57 0 0 1 1.796-7.949c2.704-8.446 12.462-22.956 2.182-32.377z" opacity="1" data-original="#ffaa7b" class=""></path><path fill="#fc9460" d="M156.744 154.721c4.103-3.76 13.276-1.854 16.81.448a49.656 49.656 0 0 0-.149 14.623l4.17 30.372c0 2.448.077 4.85.219 7.21-10.169 3.067-16.22-6.062-17.071-12.327a46.57 46.57 0 0 0-1.796-7.949c-2.705-8.446-12.463-22.956-2.183-32.377z" opacity="1" data-original="#fc9460"></path><path fill="#ffc7ab" d="M333.324 138.518c-4.621-7.249-3.09-13.17-3.015-20.103 0 0 3.898-31.917-35.411-43.25-11.38-3.281-27.439-5.243-43.894-4.612-11.451 8.073-18.992 19.919-18.992 36.705 0 7.715 1.663 13.744-3.072 21.566-5.105 8.435-8.076 20.602-6.389 33.542l4.249 32.589c0 46.852 23.748 78.697 43.949 95.217a59.417 59.417 0 0 0 9.14 6.131 58.864 58.864 0 0 0 12.391-7.38c19.831-15.4 43.144-45.085 43.144-88.758l4.17-30.372c1.645-11.967-1.207-23.331-6.27-31.275z" opacity="1" data-original="#ffc7ab" class=""></path><path fill="#ffaa7b" d="M270.955 288.264c-19.831-16.218-43.145-47.48-43.145-93.475l-4.171-31.993c-1.656-12.702 1.26-24.647 6.272-32.928 4.647-7.679 3.015-13.597 3.015-21.172 0-18.073 8.888-30.329 21.999-38.243-34.936.483-73.235 12.325-73.235 47.962 0 7.192 1.633 12.812-3.015 20.104-5.012 7.863-7.928 19.205-6.272 31.267l4.171 30.379c0 43.674 23.313 73.359 43.145 88.758 10.351 8.038 23.125 12.404 36.281 12.404 9.051 0 17.92-2.066 25.944-5.973a58.326 58.326 0 0 1-10.989-7.09z" opacity="1" data-original="#ffaa7b" class=""></path><path fill="#945230" d="M312.145 235.343c-2.319-13.828-12.296-27.674-25.616-30.695l-20.359-5.981c-3.539-1.039-7.082.776-8.507 3.858a.718.718 0 0 1-1.308 0c-1.426-3.082-4.969-4.897-8.508-3.858l-20.359 5.981c-.505.115-1.003.249-1.498.394h.19c-2.157 5.074-5.885 17.675 4.727 27.302a45.781 45.781 0 0 1 10.941-3.938l3.636-.803c5.3-1.17 9.399-6.344 10.902-11.857.172-.633 1.072-.633 1.245 0 1.503 5.513 5.601 10.687 10.902 11.857l3.637.803a45.91 45.91 0 0 1 26.088 16.331c-1.341 5.962-5.546 15.022-18.578 19.627-8.744 3.089-18.286-2.41-19.406-11.512l-.041-.356a3.354 3.354 0 0 0-6.67 0l-.041.356c-.602 4.893-3.648 8.727-7.685 10.764-1.122 4.448-2.611 14.038 2.032 23.35 3.358 6.735 9.253 11.947 17.556 15.56a47.776 47.776 0 0 0 12.236-4.239c20.375-10.373 47.464-28.395 56.129-74.759a63.035 63.035 0 0 0 1.074-11.567c-3.299 8.14-10.155 17.932-22.719 23.382z" opacity="1" data-original="#945230" class=""></path><path fill="#753616" d="M234.194 298.276c10.52 5.361 22.545 6.573 33.757 3.67-27.398-10.62-21.735-34.541-20.244-39.447a14.91 14.91 0 0 1-13.591 1.866c-12.031-4.251-17.206-12.302-19.431-18.205a45.984 45.984 0 0 1 17.676-14.528c-11.553-9.99-6.07-23.528-4.288-27.155l-.585.172c-13.583 3.08-23.696 17.417-25.751 31.513-13.897-5.24-21.131-15.636-24.6-24.2v.004c0 3.873.361 7.744 1.072 11.551 8.649 46.355 35.608 64.375 55.985 74.759z" opacity="1" data-original="#753616"></path></g></svg>`,
        AGENT: `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 42 42" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><linearGradient id="a" x1="21" x2="21" y1="2.76" y2="39.24" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#f12711"></stop><stop offset="1" stop-color="#f5ae19"></stop></linearGradient><path fill="url(#a)" fill-rule="evenodd" d="M18.75 6.51a2.25 2.25 0 1 1 4.5 0 2.25 2.25 0 0 1-4.5 0zM21 2.76a3.75 3.75 0 0 0-.75 7.425v3.555H8a2.75 2.75 0 0 0-2.75 2.75v3.312a1.751 1.751 0 0 0-.461-.062h-3a1.75 1.75 0 0 0-1.75 1.75v10c0 .967.783 1.75 1.75 1.75h3c.16 0 .314-.021.461-.061v3.311A2.75 2.75 0 0 0 8 39.24h26a2.75 2.75 0 0 0 2.75-2.75V33.18c.147.04.302.061.462.061h3a1.75 1.75 0 0 0 1.75-1.75v-10a1.75 1.75 0 0 0-1.75-1.75h-3c-.16 0-.315.021-.462.062V16.49A2.75 2.75 0 0 0 34 13.74H21.75v-3.555A3.751 3.751 0 0 0 21 2.76zM1.789 21.24a.25.25 0 0 0-.25.25v10c0 .138.112.25.25.25h3a.25.25 0 0 0 .25-.25v-10a.25.25 0 0 0-.25-.25zm35.422 0a.25.25 0 0 0-.25.25v10c0 .138.112.25.25.25h3a.25.25 0 0 0 .25-.25v-10a.25.25 0 0 0-.25-.25zM8 15.24c-.69 0-1.25.56-1.25 1.25v20c0 .69.56 1.25 1.25 1.25h26c.69 0 1.25-.56 1.25-1.25v-20c0-.69-.56-1.25-1.25-1.25zm7 11.25a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm1.5 0a3 3 0 1 1-6 0 3 3 0 0 1 6 0zm12 1.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm0 1.5a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" clip-rule="evenodd" opacity="1" data-original="url(#a)" class=""></path></g></svg>`,
        DELEGATE: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.75 9.75a.75.75 0 01.75.75v5.42l1.63-1.916a.75.75 0 111.14 1.01l-3.25 3.81a.75.75 0 01-1.139-.001l-3.25-3.81a.75.75 0 111.14-1.01L15 15.92V10.5a.75.75 0 01.75-.75z" /><path fill-rule="evenodd" d="M5 4.5a.75.75 0 01.75.75v10.5a.75.75 0 01-1.5 0V5.25A.75.75 0 015 4.5zm4.5.75A.75.75 0 008.75 6v10.5a.75.75 0 001.5 0V6a.75.75 0 00-.75-.75z" clip-rule="evenodd" /></svg>`,
        TOOL_CALL: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path fill-rule="evenodd" d="M12 6.75a5.25 5.25 0 015.25 5.25c0 1.254-.438 2.404-1.192 3.352l-.16.213-.11.148-1.924 2.565a.75.75 0 11-1.12-1.002l1.924-2.565.11-.148.16-.213a3.75 3.75 0 00.862-2.352 3.75 3.75 0 00-7.5 0c0 .92.336 1.763.863 2.352l.16.213.11.148 1.923 2.565a.75.75 0 01-1.12 1.002L7.33 15.352l.11-.148.16-.213A5.25 5.25 0 0112 6.75zM11.25 21a.75.75 0 01.75-.75h.008a.75.75 0 01.75.75v.008a.75.75 0 01-.75.75h-.008a.75.75 0 01-.75-.75V21z" clip-rule="evenodd" /><path d="M4.125 10.125a.75.75 0 01.75-.75H6a.75.75 0 01.75.75v.008a.75.75 0 01-.75.75H4.875a.75.75 0 01-.75-.75V10.125zM17.25 10.125a.75.75 0 01.75-.75h1.125a.75.75 0 01.75.75v.008a.75.75 0 01-.75.75H18a.75.75 0 01-.75-.75V10.125zM12 2.25a.75.75 0 01.75.75v.008a.75.75 0 01-.75.75h-.008a.75.75 0 01-.75-.75V3a.75.75 0 01.75-.75z" /></svg>`,
        TOOL_RESPONSE: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path fill-rule="evenodd" d="M11.666 4.038a.75.75 0 01.668 0l7.5 4.5a.75.75 0 010 1.324l-7.5 4.5a.75.75 0 01-.668 0l-7.5-4.5a.75.75 0 010-1.324l7.5-4.5zM12 16.121l7.5-4.5-7.5-4.5-7.5 4.5 7.5 4.5z" clip-rule="evenodd" /><path d="M3.693 12.617a.75.75 0 01.668 0l7.5 4.5a.75.75 0 010 1.324l-7.5 4.5a.75.75 0 01-1.02-.662V13.28a.75.75 0 01.352-.662z" /><path d="M20.307 12.617a.75.75 0 00-.668 0l-7.5 4.5a.75.75 0 000 1.324l7.5 4.5a.75.75 0 001.02-.662V13.28a.75.75 0 00-.352-.662z" /></svg>`,
        FINAL_RESPONSE: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path fill-rule="evenodd" d="M12.97 3.97a.75.75 0 011.06 0l7.5 7.5a.75.75 0 010 1.06l-7.5 7.5a.75.75 0 11-1.06-1.06l6.22-6.22H3a.75.75 0 010-1.5h16.19l-6.22-6.22a.75.75 0 010-1.06z" clip-rule="evenodd" /></svg>`,
        ERROR: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path fill-rule="evenodd" d="M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" /></svg>`
    };

    const themeToggleBtn = document.getElementById('theme-toggle-btn');
    const sunIcon = document.getElementById('theme-icon-sun');
    const moonIcon = document.getElementById('theme-icon-moon');

    const applyTheme = (theme) => {
        if (theme === 'light') {
            document.documentElement.setAttribute('data-theme', 'light');
            sunIcon.style.display = 'none';
            moonIcon.style.display = 'block';
        } else {
            document.documentElement.setAttribute('data-theme', 'dark');
            sunIcon.style.display = 'block';
            moonIcon.style.display = 'none';
        }
    };

    themeToggleBtn.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        localStorage.setItem('xronai-theme', newTheme);
        applyTheme(newTheme);
    });

    const savedTheme = localStorage.getItem('xronai-theme') || 'dark';
    applyTheme(savedTheme);

    let availableToolSchemas = {};
    const studioContainer = document.querySelector(".studio-container");
    const editWorkflowBtn = document.getElementById("edit-workflow-btn");
    const startChatBtn = document.getElementById("start-chat-btn");
    const exportWorkflowBtn = document.getElementById("export-workflow-btn");
    const log = document.getElementById("log");
    const form = document.getElementById("form");
    const input = document.getElementById("input");
    const configurationView = document.querySelector('.configuration-view');
    const originalPlaceholder = configurationView.innerHTML;
    const canvasElement = document.getElementById('drawflow');
    const editor = new Drawflow(canvasElement);
    const loadingOverlay = document.getElementById('loading-overlay');
    const loadingMessage = document.getElementById('loading-message');

    editor.reroute = true;
    editor.reroute_fix_curvature = true;
    editor.force_first_input = false;
    editor.start();

    const addToolModal = document.getElementById('add-tool-modal');
    const toolListContainer = document.getElementById('tool-list');
    const addToolBtn = document.getElementById('add-tool-btn');
    const closeModalBtn = document.getElementById('close-tool-modal-btn');

    const uuidv4 = () => ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));

    function showLoadingOverlay(message) {
        loadingMessage.textContent = message;
        loadingOverlay.style.display = 'flex';
    }

    function hideLoadingOverlay() {
        loadingOverlay.style.display = 'none';
    }

    function addMessage(type, title, content, source, isCollapsible = false) {
        const entry = document.createElement("div");
        entry.className = `log-entry event-${type}`;

        const sourceName = source ? `<span class="source-name">${source.name}</span>` : '';
        const iconSvg = ICONS[type] || ICONS.AGENT;

        let formattedContent = marked.parse(content || '');

        let entryHTML;
        if (isCollapsible) {
            entryHTML = `
                <details>
                    <summary>
                        <div class="log-header">
                            <span class="log-icon">${iconSvg}</span>
                            <strong class="log-title">${title}</strong>
                            ${sourceName}
                        </div>
                    </summary>
                    <div class="log-content collapsible-content">${formattedContent}</div>
                </details>
            `;
        } else {
            entryHTML = `
                <div class="log-header">
                    <span class="log-icon">${iconSvg}</span>
                    <strong class="log-title">${title}</strong>
                    ${sourceName}
                </div>
                <div class="log-content">${formattedContent}</div>
            `;
        }

        entry.innerHTML = entryHTML;
        log.appendChild(entry);
        log.scrollTop = log.scrollHeight;
    }

    async function fetchToolSchemas() {
        try {
            const response = await fetch('/api/v1/tools/schemas');
            if (!response.ok) throw new Error('Failed to fetch tool schemas');
            availableToolSchemas = await response.json();
            populateToolModal();
        } catch (error) {
            console.error("Error fetching tool schemas:", error);
        }
    }

    function populateToolModal() {
        toolListContainer.innerHTML = '';
        for (const toolName in availableToolSchemas) {
            const btn = document.createElement('button');
            btn.textContent = toolName.charAt(0).toUpperCase() + toolName.slice(1);
            btn.onclick = () => {
                addNode('tool', toolName);
                addToolModal.style.display = 'none';
            };
            toolListContainer.appendChild(btn);
        }
    }

    function setMode(mode) {
        if (mode === 'chat') {
            compileAndStartChat();
        } else {
            studioContainer.classList.remove('chat-mode');
            editWorkflowBtn.classList.add('active');
            startChatBtn.classList.remove('active');
            editor.editor_mode = 'edit';
            disconnectWebSocket();
        }
    }

    async function compileAndStartChat() {
        showLoadingOverlay("Compiling workflow...");
        const workflowData = editor.export();

        try {
            const response = await fetch('/api/v1/workflow/compile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(workflowData),
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || "Unknown compilation error.");
            }
            
            log.innerHTML = '';
            studioContainer.classList.add('chat-mode');
            startChatBtn.classList.add('active');
            editWorkflowBtn.classList.remove('active');
            editor.editor_mode = 'fixed';
            connectWebSocket();

        } catch (error) {
            console.error("Compilation failed:", error);
            alert(`Could not start chat. Please fix the workflow.\n\nError: ${error.message}`);
        } finally {
            hideLoadingOverlay();
        }
    }

    function loadDefaultWorkflow() {
        editor.clear();
        const userNodeId = addNode('user', 'User Input');
        // const agentNodeId = addNode('agent', 'Default Agent');
        // editor.addConnection(userNodeId, agentNodeId, "output_1", "input_1");
    }

    function addNode(type, typeOrTitle) {
        let baseName = typeOrTitle;
        // Generate a default subtitle based on the type
        let subtitle = `${type.charAt(0).toUpperCase() + type.slice(1)} Node`;

        let nodeData = {};
        let inputs = 1;
        let outputs = 1;
        
        let iconSvg = NODE_ICONS[type.toUpperCase()];
        let nodeClass = type;

        switch (type) {
            case 'supervisor':
                nodeData = { system_message: `You are the ${baseName} supervisor.`, use_agents: true };
                break;
            case 'agent':
                nodeData = { system_message: `You are the ${baseName} agent.`, keep_history: true, output_schema: "", strict: false };
                break;

            case 'user':
                inputs = 0;
                subtitle = "Workflow Entry Point";
                break;
            case 'mcp':
                nodeData = { type: 'sse', url: 'http://localhost:8000/sse', script_path: 'path/to/server.py', auth_token: '' };
                outputs = 0;
                subtitle = "Multi-Compute Process";
                break;
            case 'tool':
                baseName = typeOrTitle;
                nodeClass = 'tool';
                nodeData = { tool_type: typeOrTitle, config: {} };
                subtitle = `Tool: ${typeOrTitle}`;
                outputs = 0;
                break;
        }

        // Common data for all nodes
        nodeData.uuid = uuidv4();
        nodeData.name = baseName;

        const nodeHtml = `
            <div class="node-content-wrapper">
                <div class="node-icon-container">
                    ${iconSvg}
                </div>
                <div class="node-text-container">
                    <div class="node-title">${baseName}</div>
                    <div class="node-subtitle">${subtitle}</div>
                </div>
            </div>
        `;
        
        const nodeId = editor.addNode(baseName, inputs, outputs, 300, 150, nodeClass, nodeData, nodeHtml);
        return nodeId;
    }
    
    editor.on('nodeSelected', id => {
        const node = editor.getNodeFromId(id);
        const nodeData = node.data;

        const updateNodeVisuals = (newNodeData) => {
            const nodeElement = document.querySelector(`#node-${id}`);
            if (!nodeElement) return;

            const titleElement = nodeElement.querySelector('.node-title');
            if (titleElement) titleElement.textContent = newNodeData.name;
        };

        if (node.class === 'user') {
            configurationView.innerHTML = `<div class="config-content"><div class="config-header"><span class="node-type-badge user">User</span><h2>User</h2></div><p>This is the entry point for the user's chat message.</p></div>`;
            return;
        }

        if (node.class === 'tool') {
            const toolType = nodeData.tool_type;
            const schema = availableToolSchemas[toolType];
            if (!schema) {
                configurationView.innerHTML = `<div class="panel-placeholder">Error: Tool schema for '${toolType}' not found.</div>`;
                return;
            }

            let formFieldsHtml = '';
            if (schema.properties && Object.keys(schema.properties).length > 0) {
                 for (const key in schema.properties) {
                    const prop = schema.properties[key];
                    const currentValue = nodeData.config[key] || '';
                    formFieldsHtml += `
                        <div class="config-section">
                            <label for="tool-config-${key}" class="config-label">${prop.title || key}</label>
                            <input type="text" id="tool-config-${key}" data-key="${key}" class="config-input tool-config-input" value="${currentValue}" placeholder="${prop.description || ''}">
                        </div>
                    `;
                }
            } else {
                formFieldsHtml = `<p class="config-section">This tool requires no configuration.</p>`;
            }

            let panelHtml = `
            <div class="config-content">
                <div class="config-header">
                    <span class="node-type-badge tool">${toolType}</span>
                </div>
                <div class="config-section">
                    <h3>Name (Instance)</h3>
                    <input type="text" id="node-name-input" class="config-input" value="${nodeData.name || ''}">
                </div>
                ${formFieldsHtml}
                <div class="config-actions">
                     <button id="save-node-btn" class="action-btn save">Save Changes</button>
                     <button id="delete-node-btn" class="action-btn delete">Delete Node</button>
                </div>
            </div>`;
            configurationView.innerHTML = panelHtml;

            document.getElementById('save-node-btn').addEventListener('click', () => {
                const newName = document.getElementById('node-name-input').value;
                if (!newName.trim()) { alert("Node name cannot be empty."); return; }

                const updatedConfig = {};
                document.querySelectorAll('.tool-config-input').forEach(input => {
                    updatedConfig[input.dataset.key] = input.value;
                });

                const updatedData = { ...nodeData, name: newName, config: updatedConfig };
                
                editor.updateNodeDataFromId(id, updatedData);
                updateNodeVisuals(updatedData);
                alert('Tool configuration saved. Re-compile to apply.');
            });

            document.getElementById('delete-node-btn').addEventListener('click', () => {
                if (confirm(`Delete node "${nodeData.name}"?`)) {
                    editor.removeNodeId(`node-${id}`);
                    resetConfigPanel();
                }
            });
            return;
        }

        if (node.class === 'mcp') {
            let panelHtml = `
            <div class="config-content">
                <div class="config-header">
                    <span class="node-type-badge mcp">MCP Server</span>
                </div>
                <div class="config-section">
                    <h3>Name</h3>
                    <input type="text" id="node-name-input" class="config-input" value="${nodeData.name || ''}">
                </div>
                <div class="config-section">
                    <h3>Server Type</h3>
                    <select id="mcp-type-select" class="config-input">
                        <option value="sse" ${nodeData.type === 'sse' ? 'selected' : ''}>Remote (SSE)</option>
                        <option value="stdio" ${nodeData.type === 'stdio' ? 'selected' : ''}>Local (stdio)</option>
                    </select>
                </div>
                <div id="mcp-sse-fields" class="config-section" style="display: ${nodeData.type === 'sse' ? 'block' : 'none'};">
                    <h3>Server URL</h3>
                    <input type="text" id="mcp-url-input" class="config-input" value="${nodeData.url || ''}" placeholder="http://localhost:8000/sse">
                    <h3 style="margin-top: 1.5rem;">Auth Token (Optional)</h3>
                    <input type="text" id="mcp-token-input" class="config-input" value="${nodeData.auth_token || ''}" placeholder="Bearer token if required">
                </div>
                <div id="mcp-stdio-fields" class="config-section" style="display: ${nodeData.type === 'stdio' ? 'block' : 'none'};">
                    <h3>Script Path</h3>
                    <input type="text" id="mcp-script-path-input" class="config-input" value="${nodeData.script_path || ''}" placeholder="e.g., examples/supervisor_multi_mcp/weather_server.py">
                </div>
                <div class="config-actions">
                     <button id="save-node-btn" class="action-btn save">Save Changes</button>
                     <button id="delete-node-btn" class="action-btn delete">Delete Node</button>
                </div>
            </div>`;
            configurationView.innerHTML = panelHtml;

            const mcpTypeSelect = document.getElementById('mcp-type-select');
            const sseFields = document.getElementById('mcp-sse-fields');
            const stdioFields = document.getElementById('mcp-stdio-fields');
            mcpTypeSelect.addEventListener('change', (e) => {
                const isSSE = e.target.value === 'sse';
                sseFields.style.display = isSSE ? 'block' : 'none';
                stdioFields.style.display = isSSE ? 'none' : 'block';
            });
            
            document.getElementById('save-node-btn').addEventListener('click', () => {
                 const newName = document.getElementById('node-name-input').value;
                 if (!newName.trim()) { alert("Node name cannot be empty."); return; }
                 const updatedData = {
                    ...nodeData,
                    name: newName,
                    type: document.getElementById('mcp-type-select').value,
                    url: document.getElementById('mcp-url-input').value,
                    auth_token: document.getElementById('mcp-token-input').value,
                    script_path: document.getElementById('mcp-script-path-input').value,
                };
                editor.updateNodeDataFromId(id, updatedData);
                updateNodeVisuals(updatedData);
                alert('MCP node updated. Re-compile to apply changes.');
            });

            document.getElementById('delete-node-btn').addEventListener('click', () => {
                if (confirm(`Delete node "${nodeData.name}"?`)) { editor.removeNodeId(`node-${id}`); resetConfigPanel(); }
            });
            return;
        }

        let panelHtml = `
            <div class="config-content">
                <div class="config-header"><span class="node-type-badge ${node.class}">${node.class}</span></div>
                <div class="config-section"><h3>Name</h3><input type="text" id="node-name-input" class="config-input" value="${nodeData.name || ''}"></div>
                <div class="config-section"><h3>System Message</h3><textarea id="system-message-input" class="config-textarea">${nodeData.system_message || ''}</textarea></div>`;

        if (node.class === 'supervisor') {
            panelHtml += `<div class="config-section toggle-section"><label for="use-agents-toggle">Can Respond Directly</label><input type="checkbox" id="use-agents-toggle" class="toggle-switch" ${nodeData.use_agents ? 'checked' : ''}></div>`;
        }
        if (node.class === 'agent') {
            panelHtml += `<div class="config-section toggle-section"><label for="keep-history-toggle">Remember History</label><input type="checkbox" id="keep-history-toggle" class="toggle-switch" ${nodeData.keep_history ? 'checked' : ''}></div>
                <div class="config-section"><h3>Enforce Output Schema (JSON)</h3><textarea id="output-schema-input" class="config-textarea" placeholder='e.g., {"type": "object", "properties": ...}'>${nodeData.output_schema || ''}</textarea></div>
                <div class="config-section toggle-section" id="strict-mode-container" style="display: ${nodeData.output_schema && nodeData.output_schema.trim() ? 'flex' : 'none'};"><label for="strict-mode-toggle">Strict Mode</label><input type="checkbox" id="strict-mode-toggle" class="toggle-switch" ${nodeData.strict ? 'checked' : ''}></div>`;
        }
        panelHtml += `<div class="config-actions"><button id="save-node-btn" class="action-btn save">Save Changes</button><button id="delete-node-btn" class="action-btn delete">Delete Node</button></div></div>`;
        configurationView.innerHTML = panelHtml;

        const saveBtn = document.getElementById('save-node-btn');
        const deleteBtn = document.getElementById('delete-node-btn');
        const schemaInput = document.getElementById('output-schema-input');
        const strictContainer = document.getElementById('strict-mode-container');

        if (schemaInput) {
            schemaInput.addEventListener('input', () => { strictContainer.style.display = schemaInput.value.trim() ? 'flex' : 'none'; });
        }
        
        saveBtn.addEventListener('click', () => {
            const newName = document.getElementById('node-name-input').value;
            if (!newName.trim()) { alert("Node name cannot be empty."); return; }
            
            const updatedData = { ...nodeData, name: newName, system_message: document.getElementById('system-message-input').value };
            
            if (node.class === 'supervisor') { updatedData.use_agents = document.getElementById('use-agents-toggle').checked; }
            if (node.class === 'agent') {
                updatedData.keep_history = document.getElementById('keep-history-toggle').checked;
                updatedData.output_schema = document.getElementById('output-schema-input').value;
                updatedData.strict = document.getElementById('strict-mode-toggle').checked;
            }

            editor.updateNodeDataFromId(id, updatedData);
            updateNodeVisuals(updatedData);
            alert('Node data updated locally. Compile to apply changes.');
        });
        
        deleteBtn.addEventListener('click', () => {
            if (confirm(`Delete node "${nodeData.name}"?`)) { editor.removeNodeId(`node-${id}`); resetConfigPanel(); }
        });
    });

    function resetConfigPanel() { configurationView.innerHTML = originalPlaceholder; }
    editor.on('nodeUnselected', resetConfigPanel);

    let ws = null;
    function connectWebSocket() {
        if (ws && ws.readyState === WebSocket.OPEN) return;
        ws = new WebSocket(`ws://${window.location.host}/ws`);
        ws.onopen = () => {};
        ws.onclose = (event) => { if (studioContainer.classList.contains('chat-mode')) { console.log(`Connection closed: ${event.reason || "Unknown"}`); } ws = null; };
        ws.onerror = () => addMessage("ERROR", "Connection Error", "Could not connect to the workflow server.", null);
        ws.onmessage = (event) => {
            document.getElementById('thinking-indicator')?.remove();
            input.classList.remove('processing');

            const data = JSON.parse(event.data);
            
            if (data.type === 'WORKFLOW_END') return;

            let content;
            switch (data.type) {
                case "WORKFLOW_START":
                    const userQuery = data.data.user_query.replace(/\n/g, '<br>');
                    addMessage("USER", "You", userQuery, null);
                    break;
                case "SUPERVISOR_DELEGATE":
                    content = `**Reasoning:** ${data.data.reasoning}\n\n**Query for Agent:** ${data.data.query_for_agent}`;
                    addMessage("DELEGATE", `Delegate to ${data.data.target.name}`, content, data.data.source, true);
                    break;
                case "AGENT_TOOL_CALL":
                    content = `**Tool:** \`${data.data.tool_name}\`\n\n**Arguments:**\n\`\`\`json\n${JSON.stringify(data.data.arguments, null, 2)}\n\`\`\``;
                    addMessage("TOOL_CALL", "Tool Call", content, data.data.source, true);
                    break;
                case "AGENT_TOOL_RESPONSE":
                    content = `\`\`\`json\n${JSON.stringify(data.data.result, null, 2)}\n\`\`\``;
                    addMessage("TOOL_RESPONSE", "Tool Response", content, data.data.source, true);
                    break;
                case "AGENT_RESPONSE":
                    addMessage("AGENT_RESPONSE", "Agent Response", data.data.content, data.data.source);
                    break;
                case "FINAL_RESPONSE":
                    addMessage("FINAL_RESPONSE", "Final Response", data.data.content, data.data.source);
                    break;
                case "ERROR":
                    addMessage("ERROR", "Error", data.data.error_message, data.data.source);
                    break;
                default:
                    content = `\`\`\`json\n${JSON.stringify(data.data, null, 2)}\n\`\`\``;
                    addMessage("SYSTEM", data.type, content, { name: "System" }, true);
            }
        };
    }

    function disconnectWebSocket() { if (ws) { ws.close(); } }
    
    form.addEventListener("submit", e => {
        e.preventDefault();
        const message = input.value.trim();
        if (message && ws && ws.readyState === WebSocket.OPEN) {
            ws.send(message);
            input.value = '';
            input.style.height = 'auto';
            input.classList.add('processing');
            
            const thinkingEntry = document.createElement("div");
            thinkingEntry.id = "thinking-indicator";
            thinkingEntry.className = "log-entry event-thinking";
            thinkingEntry.innerHTML = `
                <div class="log-header">
                    <span class="log-icon">${ICONS.AGENT}</span>
                </div>
                <div class="log-content">
                    <div class="typing-indicator">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            log.appendChild(thinkingEntry);
            log.scrollTop = log.scrollHeight;
        }
    });

    input.addEventListener('input', () => {
        input.style.height = 'auto';
        input.style.height = `${input.scrollHeight}px`;
    });

    input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            form.dispatchEvent(new Event('submit'));
        }
    });
    
    function downloadFile(filename, content, mimeType) {
        const element = document.createElement('a');
        const blob = new Blob([content], { type: mimeType });
        element.href = URL.createObjectURL(blob);
        element.download = filename;
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    async function handleExport() {
        exportWorkflowBtn.textContent = 'Exporting...';
        exportWorkflowBtn.disabled = true;
        try {
            const workflowData = editor.export();
            const response = await fetch('/api/v1/workflow/export', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ drawflow: workflowData, format: 'yaml' }),
            });
            if (!response.ok) {
                const err = await response.json();
                throw new Error(err.detail || 'Unknown export error');
            }
            const data = await response.json();
            downloadFile('workflow.yaml', data.content, 'application/x-yaml');
        } catch (error) {
            console.error('Export failed:', error);
            alert(`Could not export workflow.\n\nError: ${error.message}`);
        } finally {
            exportWorkflowBtn.textContent = 'Export as YAML';
            exportWorkflowBtn.disabled = false;
        }
    }

    await fetchToolSchemas();
    
    editWorkflowBtn.addEventListener('click', () => setMode('design'));
    startChatBtn.addEventListener('click', () => setMode('chat'));
    exportWorkflowBtn.addEventListener('click', handleExport);
    document.getElementById('add-supervisor-btn').addEventListener('click', () => addNode('supervisor', 'Supervisor'));
    document.getElementById('add-agent-btn').addEventListener('click', () => addNode('agent', 'Agent'));
    document.getElementById('add-user-btn').addEventListener('click', () => addNode('user', 'User'));
    addToolBtn.addEventListener('click', () => addToolModal.style.display = 'flex');
    closeModalBtn.addEventListener('click', () => addToolModal.style.display = 'none');
    document.getElementById('add-mcp-btn').addEventListener('click', () => addNode('mcp', 'MCP Server'));
    
    setMode('design');
    loadDefaultWorkflow();

    const resizer = document.querySelector('.resizer');
    const contextualPanel = document.querySelector('.contextual-panel');
    let isResizing = false;

    resizer.addEventListener('mousedown', (e) => {
        isResizing = true;
        document.body.style.userSelect = 'none';
        document.body.style.pointerEvents = 'none';

        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', stopResizing);
    });

    function handleMouseMove(e) {
        if (!isResizing) return;
        const newWidth = window.innerWidth - e.clientX;
        if (newWidth > 400 && newWidth < window.innerWidth - 400) {
            contextualPanel.style.width = `${newWidth}px`;
        }
    }

    function stopResizing() {
        isResizing = false;
        document.body.style.userSelect = '';
        document.body.style.pointerEvents = '';
        
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', stopResizing);
    }
});